{"ast":null,"code":"import { CommonModule } from '@angular/common';\nimport { menuProperties } from './menu';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nfunction MenuComponent_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 2)(1, \"h2\", 3);\n    i0.ɵɵelement(2, \"button\", 4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"div\", 5)(4, \"div\", 6)(5, \"strong\");\n    i0.ɵɵtext(6, \"This is the first item's accordion body.\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(7, \" It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the \");\n    i0.ɵɵelementStart(8, \"code\");\n    i0.ɵɵtext(9, \".accordion-body\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(10, \", though the transition does limit overflow. \");\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const menu_r1 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵpropertyInterpolate(\"id\", menu_r1.id);\n    i0.ɵɵadvance(2);\n    i0.ɵɵpropertyInterpolate(\"id\", menu_r1.id);\n  }\n}\nexport class MenuComponent {\n  constructor() {\n    this.menuProperties = menuProperties;\n  }\n}\nMenuComponent.ɵfac = function MenuComponent_Factory(t) {\n  return new (t || MenuComponent)();\n};\nMenuComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: MenuComponent,\n  selectors: [[\"app-menu\"]],\n  standalone: true,\n  features: [i0.ɵɵStandaloneFeature],\n  decls: 2,\n  vars: 1,\n  consts: [[\"id\", \"accordionExample\", 1, \"accordion\"], [\"class\", \"accordion-item\", 4, \"ngFor\", \"ngForOf\"], [1, \"accordion-item\"], [1, \"accordion-header\", 3, \"id\"], [\"type\", \"button\", \"data-bs-toggle\", \"collapse\", \"data-bs-target\", \"#collapseOne\", \"aria-expanded\", \"true\", \"aria-controls\", \"collapseOne\", 1, \"accordion-button\"], [\"data-bs-parent\", \"#accordionExample\", 1, \"accordion-collapse\", \"collapse\", \"show\", 3, \"id\"], [1, \"accordion-body\"]],\n  template: function MenuComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0);\n      i0.ɵɵtemplate(1, MenuComponent_div_1_Template, 11, 2, \"div\", 1);\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.menuProperties);\n    }\n  },\n  dependencies: [CommonModule, i1.NgForOf],\n  styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"names":["CommonModule","menuProperties","i0","ɵɵelementStart","ɵɵelement","ɵɵelementEnd","ɵɵtext","ɵɵadvance","ɵɵpropertyInterpolate","menu_r1","id","MenuComponent","constructor","selectors","standalone","features","ɵɵStandaloneFeature","decls","vars","consts","template","MenuComponent_Template","rf","ctx","ɵɵtemplate","MenuComponent_div_1_Template","ɵɵproperty","i1","NgForOf","styles"],"sources":["/Users/boromndindi/Desktop/workpaces/project/gestion-stock/src/app/composants/menu/menu.component.ts","/Users/boromndindi/Desktop/workpaces/project/gestion-stock/src/app/composants/menu/menu.component.html"],"sourcesContent":["import { Component } from '@angular/core';\nimport { CommonModule, NgFor } from '@angular/common';\nimport { Menu, menuProperties } from './menu';\n\n@Component({\n  selector: 'app-menu',\n  standalone: true,\n  imports: [CommonModule, NgFor],\n  templateUrl: './menu.component.html',\n  styleUrls: ['./menu.component.scss']\n})\nexport class MenuComponent {\n\n  menuProperties: Menu[] = menuProperties;\n\n}\n","<div class=\"accordion\" id=\"accordionExample\">\n    <div class=\"accordion-item\" *ngFor=\"let menu of menuProperties\">\n      <h2 class=\"accordion-header\" id=\"{{menu.id}}\">\n        <button class=\"accordion-button\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\n          \n        </button>\n      </h2>\n      <div id=\"{{menu.id}}\" class=\"accordion-collapse collapse show\" data-bs-parent=\"#accordionExample\">\n        <div class=\"accordion-body\">\n          <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\n        </div>\n      </div>\n    </div>\n</div>"],"mappings":"AACA,SAASA,YAAY,QAAe,iBAAiB;AACrD,SAAeC,cAAc,QAAQ,QAAQ;;;;;ICDzCC,EAAA,CAAAC,cAAA,aAAgE;IAE5DD,EAAA,CAAAE,SAAA,gBAES;IACXF,EAAA,CAAAG,YAAA,EAAK;IACLH,EAAA,CAAAC,cAAA,aAAkG;IAEtFD,EAAA,CAAAI,MAAA,+CAAwC;IAAAJ,EAAA,CAAAG,YAAA,EAAS;IAACH,EAAA,CAAAI,MAAA,iXAAyW;IAAAJ,EAAA,CAAAC,cAAA,WAAM;IAAAD,EAAA,CAAAI,MAAA,sBAAe;IAAAJ,EAAA,CAAAG,YAAA,EAAO;IAAAH,EAAA,CAAAI,MAAA,qDACjc;IAAAJ,EAAA,CAAAG,YAAA,EAAM;;;;IARqBH,EAAA,CAAAK,SAAA,GAAgB;IAAhBL,EAAA,CAAAM,qBAAA,OAAAC,OAAA,CAAAC,EAAA,CAAgB;IAKxCR,EAAA,CAAAK,SAAA,GAAgB;IAAhBL,EAAA,CAAAM,qBAAA,OAAAC,OAAA,CAAAC,EAAA,CAAgB;;;ADI3B,OAAM,MAAOC,aAAa;EAP1BC,YAAA;IASE,KAAAX,cAAc,GAAWA,cAAc;;;AAF5BU,aAAa,C;mBAAbA,aAAa;AAAA;AAAbA,aAAa,C;QAAbA,aAAa;EAAAE,SAAA;EAAAC,UAAA;EAAAC,QAAA,GAAAb,EAAA,CAAAc,mBAAA;EAAAC,KAAA;EAAAC,IAAA;EAAAC,MAAA;EAAAC,QAAA,WAAAC,uBAAAC,EAAA,EAAAC,GAAA;IAAA,IAAAD,EAAA;MCX1BpB,EAAA,CAAAC,cAAA,aAA6C;MACzCD,EAAA,CAAAsB,UAAA,IAAAC,4BAAA,kBAWM;MACVvB,EAAA,CAAAG,YAAA,EAAM;;;MAZ2CH,EAAA,CAAAK,SAAA,GAAiB;MAAjBL,EAAA,CAAAwB,UAAA,YAAAH,GAAA,CAAAtB,cAAA,CAAiB;;;iBDMtDD,YAAY,EAAA2B,EAAA,CAAAC,OAAA;EAAAC,MAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}